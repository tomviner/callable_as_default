Performing system checks...

System check identified no issues (0 silenced).
March 22, 2015 - 16:42:37
Django version 1.9.dev20150322143154, using settings 'callable_as_default.settings'
Starting development server at http://localhost:8003/
Quit the server with CONTROL-C.
/home/dev/django-dev/django/django/db/backends/sqlite3/base.py:57: RuntimeWarning: SQLite received a naive datetime (2015-03-22 16:44:05.353370) while time zone support is active.
  RuntimeWarning)

/home/dev/django-dev/django/django/db/backends/sqlite3/base.py:57: RuntimeWarning: SQLite received a naive datetime (2015-03-22 16:44:05.451903) while time zone support is active.
  RuntimeWarning)

> /home/dev/django-dev/callable_as_default/sample_project/cad/models.py(5)get_title()
      4     import ipdb; ipdb.set_trace()
----> 5     count_cache.append(None)
      6     n = len(count_cache)

ipdb> continue
1
> /home/dev/django-dev/callable_as_default/sample_project/cad/models.py(5)get_title()
      4     import ipdb; ipdb.set_trace()
----> 5     count_cache.append(None)
      6     n = len(count_cache)

ipdb> where
  /usr/lib/python2.7/threading.py(783)__bootstrap()
    781         # if a non-daemonic encounters this, something else is wrong.
    782         try:
--> 783             self.__bootstrap_inner()
    784         except:
    785             if self.__daemonic and _sys is None:

  /usr/lib/python2.7/threading.py(810)__bootstrap_inner()
    808
    809             try:
--> 810                 self.run()
    811             except SystemExit:
    812                 if __debug__:

  /usr/lib/python2.7/threading.py(763)run()
    761         try:
    762             if self.__target:
--> 763                 self.__target(*self.__args, **self.__kwargs)
    764         finally:
    765             # Avoid a refcycle if the thread is running a function with

  /usr/lib/python2.7/SocketServer.py(593)process_request_thread()
    591         """
    592         try:
--> 593             self.finish_request(request, client_address)
    594             self.shutdown_request(request)
    595         except:

  /usr/lib/python2.7/SocketServer.py(334)finish_request()
    332     def finish_request(self, request, client_address):
    333         """Finish one request by instantiating RequestHandlerClass."""
--> 334         self.RequestHandlerClass(request, client_address, self)
    335
    336     def shutdown_request(self, request):

  /home/dev/django-dev/django/django/core/servers/basehttp.py(99)__init__()
     97     def __init__(self, *args, **kwargs):
     98         self.style = color_style()
---> 99         super(WSGIRequestHandler, self).__init__(*args, **kwargs)
    100
    101     def address_string(self):

  /usr/lib/python2.7/SocketServer.py(649)__init__()
    647         self.setup()
    648         try:
--> 649             self.handle()
    650         finally:
    651             self.finish()

  /home/dev/django-dev/django/django/core/servers/basehttp.py(179)handle()
    177         )
    178         handler.request_handler = self      # backpointer for logging
--> 179         handler.run(self.server.get_app())
    180
    181

  /usr/lib/python2.7/wsgiref/handlers.py(85)run()
     83         try:
     84             self.setup_environ()
---> 85             self.result = application(self.environ, self.start_response)
     86             self.finish_response()
     87         except:

  /home/dev/django-dev/django/django/contrib/staticfiles/handlers.py(63)__call__()
     60
     61     def __call__(self, environ, start_response):
     62         if not self._should_handle(get_path_info(environ)):
---> 63             return self.application(environ, start_response)
     64         return super(StaticFilesHandler, self).__call__(environ, start_response)

  /home/dev/django-dev/django/django/core/handlers/wsgi.py(177)__call__()
    175             response = http.HttpResponseBadRequest()
    176         else:
--> 177             response = self.get_response(request)
    178
    179         response._handler_class = self.__class__

  /home/dev/django-dev/django/django/core/handlers/base.py(131)get_response()
    129                 wrapped_callback = self.make_view_atomic(callback)
    130                 try:
--> 131                     response = wrapped_callback(request, *callback_args, **callback_kwargs)
    132                 except Exception as e:
    133                     # If the view raised an exception, run it through exception

  /home/dev/django-dev/django/django/contrib/admin/options.py(547)wrapper()
    545         def wrap(view):
    546             def wrapper(*args, **kwargs):
--> 547                 return self.admin_site.admin_view(view)(*args, **kwargs)
    548             wrapper.model_admin = self
    549             return update_wrapper(wrapper, view)

  /home/dev/django-dev/django/django/utils/decorators.py(110)_wrapped_view()
    108                         return result
    109                 try:
--> 110                     response = view_func(request, *args, **kwargs)
    111                 except Exception as e:
    112                     if hasattr(middleware, 'process_exception'):

  /home/dev/django-dev/django/django/views/decorators/cache.py(57)_wrapped_view_func()
     55     @wraps(view_func, assigned=available_attrs(view_func))
     56     def _wrapped_view_func(request, *args, **kwargs):
---> 57         response = view_func(request, *args, **kwargs)
     58         add_never_cache_headers(response)
     59         return response

  /home/dev/django-dev/django/django/contrib/admin/sites.py(233)inner()
    231                     reverse('admin:login', current_app=self.name)
    232                 )
--> 233             return view(request, *args, **kwargs)
    234         if not cacheable:
    235             inner = never_cache(inner)

  /home/dev/django-dev/django/django/contrib/admin/options.py(1426)add_view()
   1424
   1425     def add_view(self, request, form_url='', extra_context=None):
-> 1426         return self.changeform_view(request, None, form_url, extra_context)
   1427
   1428     def change_view(self, request, object_id, form_url='', extra_context=None):

  /home/dev/django-dev/django/django/utils/decorators.py(34)_wrapper()
     32             # 'self' argument, but it is a closure over self so it can call
     33             # 'func' correctly.
---> 34             return bound_func(*args, **kwargs)
     35         # In case 'decorator' adds attributes to the function it decorates, we
     36         # want to copy those. We don't have access to bound_func in this scope,

  /home/dev/django-dev/django/django/utils/decorators.py(110)_wrapped_view()
    108                         return result
    109                 try:
--> 110                     response = view_func(request, *args, **kwargs)
    111                 except Exception as e:
    112                     if hasattr(middleware, 'process_exception'):

  /home/dev/django-dev/django/django/utils/decorators.py(30)bound_func()
     28             @decorator
     29             def bound_func(*args2, **kwargs2):
---> 30                 return func.__get__(self, type(self))(*args2, **kwargs2)
     31             # bound_func has the signature that 'decorator' expects i.e.  no
     32             # 'self' argument, but it is a closure over self so it can call

  /home/dev/django-dev/django/django/utils/decorators.py(145)inner()
    142             @wraps(func, assigned=available_attrs(func))
    143             def inner(*args, **kwargs):
    144                 with self:
--> 145                     return func(*args, **kwargs)
    146             return inner

  /home/dev/django-dev/django/django/contrib/admin/options.py(1390)changeform_view()
   1388                 initial = self.get_changeform_initial_data(request)
   1389                 form = ModelForm(initial=initial)
-> 1390                 formsets, inline_instances = self._create_formsets(request, self.model(), change=False)
   1391             else:
   1392                 form = ModelForm(instance=obj)

  /home/dev/django-dev/django/django/db/models/base.py(428)__init__()
    426                         val = field.get_default()
    427             else:
--> 428                 val = field.get_default()
    429
    430             if is_related_object:

  /home/dev/django-dev/django/django/db/models/fields/__init__.py(791)get_default()
    789         if self.has_default():
    790             if callable(self.default):
--> 791                 return self.default()
    792             return self.default
    793         if (not self.empty_strings_allowed or (self.null and

> /home/dev/django-dev/callable_as_default/sample_project/cad/models.py(5)get_title()
      3 def get_title(count_cache=[]):
      4     import ipdb; ipdb.set_trace()
----> 5     count_cache.append(None)
      6     n = len(count_cache)
      7     print n

ipdb>
